#启用unitils所需要模块
unitils.modules=database,dbunit,hibernate,spring

#自定义扩展模块，详见实例源码
#unitils.module.dbunit.className=org.unitils.dbunit.DbUnitModule
unitils.module.dbunit.className=com.doume.max.util.MySqlDbUnitModule

#配置数据库链接
database.driverClassName=com.mysql.jdbc.Driver
database.url=jdbc:mysql://127.0.0.1:3306/TestDB?autoReconnect=true&useUnicode=true&characterEncoding=utf-8
database.dialect = mysql
database.userName=root
database.password=root
#配置为数据库名称
database.schemaNames=TestDB
#配置数据库方言

#配置数据库维护策略.请注意下面这段描述
# If set to true, the DBMaintainer will be used to update the unit test database schema. This is done once for each
# test run, when creating the DataSource that provides access to the unit test database.
updateDataBaseSchema.enabled=false

#配置数据库表创建策略，是否自动建表以及建表sql脚本存放目录
#dbMaintainer.autoCreateExecutedScriptsTable=false
#dbMaintainer.script.locations=test/resources/dbscripts.sql


#数据的载入模式是可以定制的， Unitils 提供了以下几种：
#CleanInsertLoadStrategy ：先把 dataSet 中涉及到的表都清掉，再插入 dataset 中的数据
#InsertLoadStrategy ：直接插入 dataset 中的数据
#RefreshLoadStrategy ： DB 已存在的数据就修改，不存在的就插入
#UpdateLoadStrategy ：直接通过 dataset 中的数据修改 DB 中数据，如果不存在就抛出错误
#一般说来使用 RefreshLoadStrategy 比较合理，配置方法就是在 unitils.properties 中配置：
#DbUnitModule.DataSet.loadStrategy.default=org.unitils.dbunit.datasetloadstrategy.InsertLoalStrategy
DbUnitModule.DataSet.loadStrategy.default=org.unitils.dbunit.datasetloadstrategy.impl.CleanInsertLoadStrategy
#DbUnitModule.DataSet.loadStrategy.default=org.unitils.dbunit.datasetloadstrategy.impl.RefreshLoadStrategy


#配置数据集工厂
DbUnitModule.DataSet.factory.default=org.unitils.dbunit.datasetfactory.impl.MultiSchemaXmlDataSetFactory
DbUnitModule.ExpectedDataSet.factory.default=org.unitils.dbunit.datasetfactory.impl.MultiSchemaXmlDataSetFactory
#单元测试的数据清理
#单元测试过后往往会留下很多垃圾数据，并且有可能会导致下次跑单元测试失败（比如唯一性属性等问题），就有清理单元测试数据的需求， unitils 提供了事务的方式来满足这个需求，也就是在单元测试过后不提交事务。配置事务的方式有两种，一种是全局化配置（ unitils.properties ），如：
#配置事务策略 commit、rollback 和disabled；或者在代码的方法上标记@Transactional(  value=TransactionMode.ROLLBACK)
#其中 disabled 是没有事务， commit 是单元测试方法过后提交事务， rollback 是回滚事务。另外也可以直接在方法上加 @Transactional 来更细粒度的控制，如：
#    @Transactional (TransactionMode. ROLLBACK )

#DatabaseModule.Transactional.value.default=disabled|commit|rollback
DatabaseModule.Transactional.value.default=disabled

#配置数据集结构模式XSD生成路径，可以自定义目录，但不能为空
dataSetStructureGenerator.xsd.dirName=test/resources/
dbMaintainer.generateDataSetStructure.enabled=true
